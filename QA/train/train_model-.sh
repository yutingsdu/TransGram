#!/bin/bash

shellpath=`dirname $0`
BamFile="NoInput"
AnnoationFlie="NoInput"
output_dir=$shellpath/transgram_new_model
output_dir=/home/yuting/yuting/ThirdG-transcriptome-Guided/T2_Data_NM_R6_H1975_PacBio/TransGram_NewCov_adjust/



usage()
{
cat << EOT
===========================================================================

A function of TransGram-v.0.0  
Training a new filtering model 
usage:

** Required **

--bam/-b <string>		: Path to the alignment BAM files generated by minimap2.

--annoation/-a <string> : Path to the reference genome annotation(a gtf file).

---------------------------------------------------------------------------

** Options **

--help/-h			: Output TransGram Help Information

--version/-v		: Print current version of TransGram

---------------------------------------------------------------------------

** Typical commands **

A typical command might be:

  train_model -b alignment.bam -a hg38.ncbiRefSeq.gtf

===========================================================================
EOT
}
#usage

RET=$(getopt -o hvb:a: --long help,version,bam:,annotation: -n ' * ERROR' -- "$@")

eval set -- "$RET"

# set option values
while true; do
    case "$1" in
        -h | --help ) usage; exit 1;;
        -v | --version ) echo "** The current version of TransGram is v.0.0 **"; exit 1;;
        -b | --bam)
            if [ -z "$2" ]; then
                echo "Error: BAM input file is not provided!"
                usage
                exit 1
            else
                BamFile=$2
                shift 2
            fi
            ;;
        -a | --annotation)
            if [ -z "$2" ]; then
                echo "Error: A reference genome annotation file is not provided!"
                usage
                exit 1
            else
                AnnotationFile=$2
                shift 2
            fi
            ;;
        -- ) shift; break ;;
        * ) echoerror "internal error!" ; exit 1 ;;
     esac
done

# #echo $BamFile
# #exit

if [ $BamFile == "NoInput" ]; then
         echo "    "
         echo "[Error] : BAM input file is not provided!"
         echo "    "
	 usage
         exit 1
fi

MyDate=$(date "+%d/%m/%Y %T")
if [ ! -x "$output_dir" ]; then  
    # mkdir $output_dir  
    echo "a"
else 
    echo "[$MyDate] [Warning] : $output_dir exists already. It will be overwritten."
    # rm -rf $output_dir
    # mkdir $output_dir
fi


## run in parallel ###############################################################
Run(){
 #cat $1 >>$output_dir/log
 tmpfile=$$.fifo
 mkfifo $tmpfile
 exec 4<>$tmpfile
 rm $tmpfile

 for ((i=1;i<=100;i++));do # thred
         echo
         done >&4
         SAVEIFS=$IFS
         IFS=$'\n'
         for i in `cat $1`
         do
         read
           (eval ${i};echo >&4 ) &
           done <&4
           IFS=$SAVEIFS
           wait
           exec 4>&-

}
#################################################################

export PATH=/home/yuting/yuting/Software/cufflinks-2.2.1.Linux_x86_64:$PATH
export PATH=/home/yuting/yuting/Software/stringtie-2.2.1.Linux_x86_64:$PATH

TransGram_path=/home/yuting/yuting/ThirdG-transcriptome-Guided/Revision-Code/TransGram_NewCov
MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Runing Stringtie2"
# stringtie $BamFile -L -o $output_dir/stringtie.gtf
# grep "exon" $output_dir/stringtie.gtf > $output_dir/temp

# transcript_count=$(awk '$3 == "transcript"' $output_dir/stringtie.gtf | wc -l)
# if [ $transcript_count -lt 2000 ]; then
#     echo "Error: The sample provided is too small."
#     exit 1 
# fi

MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] EXtracting features"
$TransGram_path/transgram-graph $BamFile -L -o $output_dir
$TransGram_path/transgram-trans2pathsinfo $output_dir/stringtie.gtf $output_dir/transgram.graph $output_dir/gtf2path.info
# mkdir $output_dir/cuff
# cuffcompare -G $output_dir/temp -r /home/yuting/yuting/Index/Human/hg38.ncbiRefSeq.gtf -o $output_dir/cuff/cuff 2>log
# cuffcompare -G $output_dir/temp -r $AnnotationFile -o $output_dir/cuff/cuff 2>log
python $TransGram_path/xgboost_predict/get_path_feature_23.py -g $output_dir/gtf2path.info -r $output_dir/cuff.temp.refmap -o $output_dir


# if [ -s $output_dir/xgboost_predict_pro.txt ]; then
    # MyDate=$(date "+%d/%m/%Y %T")
    # echo "[$MyDate] Done!"
# fi