#!/bin/bash

# shellpath=`dirname $0`
BamFile="NoInput"
AnnoationFlie="NoInput"




usage()
{
cat << EOT
===========================================================================

A function of TransGram-v.0.0  
Training a new filtering model 
usage:

** Required **

--bam/-b <string>		: Path to the alignment BAM files generated by minimap2.

--annoation/-a <string> : Path to the reference genome annotation(a gtf file).

---------------------------------------------------------------------------

** Options **

--help/-h			: Output TransGram Help Information

--version/-v		: Print current version of TransGram

---------------------------------------------------------------------------

** Typical commands **

A typical command might be:

  train_model -b alignment.bam -a hg38.ncbiRefSeq.gtf

===========================================================================
EOT
}
#usage

RET=$(getopt -o hvb:a:o: --long help,version,bam:,annotation:,output_dir: -n ' * ERROR' -- "$@")

eval set -- "$RET"

# set option values
while true; do
    case "$1" in
        -h | --help ) usage; exit 1;;
        -v | --version ) echo "** The current version of TransGram is v.0.0 **"; exit 1;;
        -b | --bam)
            if [ -z "$2" ]; then
                echo "Error: BAM input file is not provided!"
                usage
                exit 1
            else
                BamFile=$2
                shift 2
            fi
            ;;
        -a | --annotation)
            if [ -z "$2" ]; then
                echo "Error: A reference genome annotation file is not provided!"
                usage
                exit 1
            else
                AnnotationFile=$2
                shift 2
            fi
            ;;
        -o | --output_path)
            if [ -z "$2" ]; then
                usage
                exit 1
            else
                output_path=$2
                shift 2
            fi
            ;;
        -- ) shift; break ;;
        * ) echoerror "internal error!" ; exit 1 ;;
     esac
done

# #echo $BamFile
# #exit

if [ $BamFile == "NoInput" ]; then
         echo "    "
         echo "[Error] : BAM input file is not provided!"
         echo "    "
	 usage
         exit 1
fi

MyDate=$(date "+%d/%m/%Y %T")
if [[ "$output_path" == "/" ]] || [[ "$output_path" == "./" ]]; then
    output_path="."
fi

if [ ! -d "$output_path" ]; then
    echo "[$MyDate] [Warning] : $output_path, No such directory!"
    usage
         exit 1
fi

output_dir=$output_path/transgram_new_model
MyDate=$(date "+%d/%m/%Y %T")
if [ ! -d "$output_dir" ]; then
    mkdir -p "$output_dir" 
else 
    echo "[$MyDate] [Warning] :$output_dir exists already. It will be overwritten."
    rm -rf $output_dir
    mkdir $output_dir
fi

## run in parallel ###############################################################
Run(){
 #cat $1 >>$output_dir/log
 tmpfile=$$.fifo
 mkfifo $tmpfile
 exec 4<>$tmpfile
 rm $tmpfile

 for ((i=1;i<=100;i++));do # thred
         echo
         done >&4
         SAVEIFS=$IFS
         IFS=$'\n'
         for i in `cat $1`
         do
         read
           (eval ${i};echo >&4 ) &
           done <&4
           IFS=$SAVEIFS
           wait
           exec 4>&-

}
#################################################################
PYTHON=${PYTHON:-$(command -v python3 || command -v python)}

if [ -z "$PYTHON" ]; then
    echo "Error: Python not found." >&2
    exit 1
fi

export PATH=/home/yuting/yuting/ThirdG-transcriptome-Guided/R2_Data7/A_reduceannontation_rzt/gffcompare:$PATH
# export PATH=../../:$PATH


SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
shellpath=$output_path
output_dir=$shellpath/transgram_new_model

TransGram_path=$(dirname $(dirname $SCRIPT_DIR))
# echo $TransGram_path
MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Runing TransGram"
$TransGram_path"/TransGram" -b $BamFile -o $output_dir/TG/
grep "exon" $output_dir/TG/*temp.gtf  > $output_dir/temp

transcript_count=$(awk '$3 == "transcript"' $output_dir/TG/*temp.gtf  | wc -l)
if [ $transcript_count -lt 2000 ]; then
    echo "Error: The sample provided is too small."
    exit 1 
fi

MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Extracting features"
# $TransGram_path/transgram-graph $BamFile -L -o $output_dir
# $TransGram_path/transgram-trans2pathsinfo $output_dir/TransGram.gtf $output_dir/transgram.graph $output_dir/gtf2path.info
mkdir $output_dir/gff
# cuffcompare -G $output_dir/temp -r /home/yuting/yuting/Index/Human/hg38.ncbiRefSeq.gtf -o $output_dir/cuff/cuff 2>log
gffcompare -G $output_dir/temp -r $AnnotationFile -o $output_dir/gff/gff 2>log
$PYTHON $TransGram_path/QA/get_path_feature.py -g $output_dir/TG/tmp/gtf2path.info -r $output_dir/*.refmap -o $output_dir
