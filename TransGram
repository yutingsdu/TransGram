#!/bin/bash
shellpath=`dirname $0`
output_dir=transgram_outdir
BamFile="NoInput"
AnnoFile="null"
thread=2
MinAverageCov=0.01 #--min-average-junc-ratio 
minScore=0.1 # 0.5
TransLen=200
Seed=2
PreModel="refseq"
datasource="NULL"
CustomizedModel="NULL"
prefix="NULL"
assembledGTF="NoInput"
SDT="DEFAULT"
Train="false"
output_mapped_length="false"
usage()
{
cat << EOT
===========================================================================

TransGram-v.1.0 usage:

** Required **

--bam/-b <string>		: Path to the alignment BAM files generated by minimap2.

---------------------------------------------------------------------------

** Options **

--help/-h			: Output TransGram Help Information.

--annotation/-G	      <string>	: Reference annotation to use for guiding the assembly process. (GTF)

--specify_data_type/-S<string>	: Specify data type to be "alpha" or "beta". (default: data type will be determined by TransGram)

--version/-v			: Print current version of TransGram.

--output_dir/-o       <string>	: Output path for TransGram. (default:transgram_outdir)

--Prefix/-P 	      <string>  : Name prefix for output transcripts. (default: NULL)

--output_mapped_length          : Output the mapped length for the aligned read. (default: false)

--min_trans_length/-l <int>   	: Minimum assembled transcript length. (default:200)

--min_trans_score/-s  <double> 	: Minimum xGboost score for the assembled transcripts. (default:0.1)

--min_average_frac/-c <double>  : Minimum junction coverage fraction by average junction coverage. (default:0.001)

--QA		      <string>	: Path to the transcripts generated from the correspoding BAM file (in GTF format).
				  TransGram will assess the quality and filter them based on a specific parameter (requires -s)

--train 			: Train a new modle using user-provided data.
				 (Requires the -b, -G, and -o  option, and gffcompare must be installed.)


--CusModel	      <string>  : Path to the customized model created by the users.

--pre_model_gencode    		: Specify pre-trained model trained with labels derived from or GENCODE annotations.
                                  (default: using pre-trained model trained with labels derived from or GENCODE annotations NCBI_RefSeq)

---------------------------------------------------------------------------

** Typical commands **

A typical TransGram command might be:

  TransGram -b alignment.bam -o transgram_outdir

===========================================================================
EOT
}
#usage

# parse options:
RET=`getopt -o hvb:o:d:l:s:c:z:y:ABG:MTP:OS: \
--long help,version,bam:,output_dir:,\
min_average_frac:,min_trans_length:,\
min_trans_score:,\
min_seed_cov:,\
QA:,\
CusModel:,\
ont,pacbio,\
annotation:,\
pre_model_gencode,\
train,\
Prefix:,\
output_mapped_length,\
specify_data_type: \
-n ' * ERROR' -- "$@"`

eval set -- "$RET"
# set option values
while true; do
    case "$1" in
        -h | --help ) usage; exit 1;;
        -v | --version ) echo "** The current version of TransGram is v.1.0 **"; exit 1;;
        -o | --output_dir) output_dir=$2     
			shift 2 ;;
        -b | --bam) 	   BamFile=$2 
			shift 2 ;;
	-d | --min_average_frac) MinAverageCov=$2 
			shift 2 ;;
	-l | --min_trans_length) TransLen=$2 
			shift 2 ;;
	-s | --min_trans_score) minScore=$2 
			shift 2 ;;
	-c | --min_seed_cov) Seed=$2 
			shift 2 ;;
	-A | --ont) datasource="ont"
			shift 1 ;;
	-B | --pacbio) datasource="pacbio"
			shift 1 ;;
	-z | --QA) assembledGTF=$2
			shift 2 ;;
	-y | --CusModel) CustomizedModel=$2
			shift 2 ;;
	-G | --annotation) AnnoFile=$2
			shift 2 ;;
	-M | --pre_model_gencode) PreModel="gencode"
			shift 1 ;;
	-T | --train) Train="true"
			shift 1 ;;
	-P | --Prefix) prefix=$2
			shift 2 ;;
	-O | --output_mapped_length) output_mapped_length="true"
			shift 1 ;;
	-S | --specify_data_type) SDT=$2
			shift 2 ;;
        -- ) shift; break ;;
        * ) echoerror "internal error!" ; exit 1 ;;
     esac
done

#echo $BamFile
#exit

if [ $BamFile == "NoInput" ]; then
         echo "    "
         echo "[Error] : BAM input file is not provided!"
         echo "    "
	 usage
         exit 1
fi
#if [ $datasource == "NULL" ]; then
#         echo "    "
#         echo "[Error] : Please specify --ont or --pacbio!"
#         echo "    "
#	 usage
#         exit 1
#fi

if [ $CustomizedModel != "NULL" ]; then
         echo "    "
         echo "[WARNNING] : You will use a custom model to perform the transcript filtering!"
         echo "    "
fi

if [ $SDT == "alpha" ]; then
         echo "    "
         echo "[WARNNING] : You specify data type as: alpha!"
         echo "    "
fi

if [ $SDT == "beta" ]; then
         echo "    "
         echo "[WARNNING] : You specify data type as: beta!"
         echo "    "
fi

MyDate=$(date "+%d/%m/%Y %T")
if [ ! -x "$output_dir" ]; then  
    mkdir $output_dir  
else 
    echo "[$MyDate] [WARNING]: $output_dir exists already. It will be overwritten."
    rm -rf $output_dir
    mkdir $output_dir
fi

## run in parallel ###############################################################
Run(){
 #cat $1 >>$output_dir/log
 tmpfile=$$.fifo
 mkfifo $tmpfile
 exec 4<>$tmpfile
 rm $tmpfile

 for ((i=1;i<=100;i++));do # thred
         echo
         done >&4
         SAVEIFS=$IFS
         IFS=$'\n'
         for i in `cat $1`
         do
         read
           (eval ${i};echo >&4 ) &
           done <&4
           IFS=$SAVEIFS
           wait
           exec 4>&-

}
#################################################################

PYTHON=${PYTHON:-$(command -v python3 || command -v python)}

if [ -z "$PYTHON" ]; then
    echo "Error: Python not found." >&2
    exit 1
fi

if [ $assembledGTF != "NoInput" ]; then

	if [ $prefix != "NULL" ]; then
        	prefix=$prefix"-"
	fi

 	##Quality Assessment --QA 
	MyDate=$(date "+%d/%m/%Y %T")
        echo "[$MyDate] Assessing quality for a given GTF file..."

	#$shellpath/transgram-graph $BamFile -L -o $output_dir

        echo $shellpath/transgram-graph $BamFile -L -o $output_dir >$output_dir/command
	echo $shellpath/transgram-graph  $BamFile -o $output_dir >>$output_dir/command
	Run $output_dir/command


	$shellpath/transgram-path-search -g $output_dir/transgram.graph -o $output_dir --only-determine-dataType --prefix $prefix

	if [ $prefix == "NULL" ]; then
        	prefix=""
	fi
	datatype=$(tail -n 1 $output_dir/$prefix"data.info")

	# if [ $prefix == "NULL" ]; then
    #     	prefix=""
	# fi
	$shellpath/transgram-trans2pathsinfo $assembledGTF $output_dir/transgram.graph $output_dir/transgram.reads.raw.align $output_dir/gtf2path.info $datatype
	if [ $datatype == "alpha" ]; then
		TraningData=$shellpath/QA/features/alpha.model.csv

        	if [ $PreModel == "gencode" ]; then
                        TraningData=$shellpath/QA/features/alpha.model.gencode.csv
        	fi

        	if [ $CustomizedModel != "NULL" ]; then
                        TraningData=$CustomizedModel/transgram_new_model/features.csv
        	fi

		$PYTHON $shellpath/QA/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info -o $output_dir
	elif [ $datatype == "beta" ]; then
		TraningData=$shellpath/QA/features/beta.model.csv

        	if [ $PreModel == "gencode" ]; then
                        TraningData=$shellpath/QA/features/beta.model.gencode.csv
        	fi
        	if [ $CustomizedModel != "NULL" ]; then
                        TraningData=$CustomizedModel/transgram_new_model/features.csv
        	fi

		$PYTHON $shellpath/QA/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info -o $output_dir
	fi

	$shellpath/transgram-filter $output_dir/TransGram.score $assembledGTF $output_dir/$prefix"TransGram.gtf" $minScore transgram
	
	MyDate=$(date "+%d/%m/%Y %T")
        echo "[$MyDate] Done"
	exit
fi


#################################################################

#train a new model
if [ $Train == "true" ]; then
	MyDate=$(date "+%d/%m/%Y %T")
	echo "[$MyDate] Training a new model..."
	$shellpath/QA/train/train_model -b $BamFile -a $AnnoFile -o $output_dir
	MyDate=$(date "+%d/%m/%Y %T")
	echo "[$MyDate] Done!"

	exit
fi

#building graph
MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Building graph..."

if [ $output_mapped_length == "true" ]; then
	echo $shellpath/transgram-graph $BamFile -L -O -o $output_dir >$output_dir/command
else
	echo $shellpath/transgram-graph $BamFile -L -o $output_dir >$output_dir/command
fi
echo $shellpath/transgram-graph  $BamFile -o $output_dir >>$output_dir/command
Run $output_dir/command


#searching paths
MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Searching paths..."

if [ $prefix != "NULL" ]; then
	prefix=$prefix"-"
fi
$shellpath/transgram-path-search -r $output_dir/transgram.reads.raw.align -g $output_dir/transgram.graph -o $output_dir \
				 -l $TransLen -d $MinAverageCov \
				 -F $Seed \
				 --prefix $prefix \
				 --specify-dataType $SDT \
				 --annotation $AnnoFile
if [ $prefix == "NULL" ]; then
        prefix=""
fi
datatype=$(tail -n 1 $output_dir/$prefix"data.info")

#xgboost prediction
MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Assessing quality score..."

$shellpath/transgram-trans2pathsinfo $output_dir/$prefix"TransGram-temp.gtf" $output_dir/transgram.graph $output_dir/transgram.reads.raw.align $output_dir/gtf2path.info $datatype

if [ $datatype == "alpha" ]; then


	TraningData=$shellpath/QA/features/alpha.model.csv

	if [ $PreModel == "gencode" ]; then
                        TraningData=$shellpath/QA/features/alpha.model.gencode.csv
	fi

	if [ $CustomizedModel != "NULL" ]; then
                        TraningData=$CustomizedModel/transgram_new_model/features.csv
	fi
	$PYTHON $shellpath/QA/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info -o $output_dir
elif [ $datatype == "beta" ]; then
	TraningData=$shellpath/QA/features/beta.model.csv

	if [ $PreModel == "gencode" ]; then
                        TraningData=$shellpath/QA/features/beta.model.gencode.csv
	fi
	if [ $CustomizedModel != "NULL" ]; then
                        TraningData=$CustomizedModel/transgram_new_model/features.csv
        fi
	$PYTHON $shellpath/QA/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info -o $output_dir
fi

#filtering
assemble_gtf=$output_dir/$prefix"TransGram-temp.gtf"
single_exon_gtf=$output_dir/$prefix"TransGram-singleExon.gtf"
if [ -s $output_dir/TransGram.score ]; then
	$shellpath/transgram-filter $output_dir/TransGram.score $assemble_gtf $output_dir/$prefix"TransGram.gtf" $minScore transgram
fi

#abundance-estamation
MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Estimating expression abundance..."
cat $output_dir/$prefix"TransGram.gtf" $single_exon_gtf >$output_dir/transGram-expression-estimated.gtf
$shellpath/transgram-expression $BamFile -G $output_dir/transGram-expression-estimated.gtf -e -o $output_dir/$prefix"TransGram-Abundance.tsv"

#clean files
rm $output_dir/transGram-expression-estimated.gtf
mkdir $output_dir/tmp
mv $output_dir/command $output_dir/$prefix"data.info"  $output_dir/gtf2path.info $output_dir/transgram.graph $output_dir/transgram.reads.raw.align $output_dir/tmp
if [ $output_mapped_length == "true" ]; then
	mv $output_dir/transgram.reads.length $output_dir/tmp
fi

MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Done!"

